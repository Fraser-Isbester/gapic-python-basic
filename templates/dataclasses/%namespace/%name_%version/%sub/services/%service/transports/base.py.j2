{% extends '_base.py.j2' %}

{% block content %}

import abc
from typing import Awaitable, Callable, Optional, Sequence, Union
import pkg_resources

from google.api_core import gapic_v1
from google.api_core import retry as retries # NOQA
{% if service.has_lro %}
from google.api_core import operations_v1
{% endif %}

{% filter sort_lines %}
{% for method in service.methods.values() %}
{{ method.input.ident.python_import }}
{{ method.output.ident.python_import }}
{% endfor %}
{% if opts.add_iam_methods or api.has_iam_mixin %}
from google.iam.v1 import iam_policy_pb2  # type: ignore
from google.iam.v1 import policy_pb2  # type: ignore
{% endif %}
{% if api.has_location_mixin %}
from google.cloud.location import locations_pb2 # type: ignore
{% endif %}
{% if api.has_operations_mixin %}
from google.longrunning import operations_pb2
{% endif %}
{% endfilter %}
{% filter sort_lines %}
{% for operations_service in api.get_extended_operations_services(service) %}
from {{ (api.naming.module_namespace + (api.naming.versioned_module_name,) + service.meta.address.subpackage)|join(".") }}.services import {{ operations_service.name|snake_case }}
{% endfor %}
{% endfilter %}

try:
    DEFAULT_CLIENT_INFO = gapic_v1.client_info.ClientInfo(
        gapic_version=pkg_resources.get_distribution(
            '{{ api.naming.warehouse_package_name }}',
        ).version,
    )
except pkg_resources.DistributionNotFound:
    DEFAULT_CLIENT_INFO = gapic_v1.client_info.ClientInfo()

DEFAULT_HOST = '127.0.0.1:8081' #TODO

class {{ service.name }}Transport(abc.ABC):
    """Abstract transport class for {{ service.name }}."""

    AUTH_SCOPES = (
        {% for scope in service.oauth_scopes %}
        '{{ scope }}',
        {% endfor %}
    )

    DEFAULT_HOST = DEFAULT_HOST

    def __init__(
            self, *,
            host: str = DEFAULT_HOST,
            client_info: gapic_v1.client_info.ClientInfo = DEFAULT_CLIENT_INFO,
            **kwargs,
            ) -> None:
        """Instantiate the transport.

        Args:
            host ({% if service.host %}Optional[str]{% else %}str{% endif %}):
                {{ ' ' }}The hostname to connect to.
            client_info (google.api_core.gapic_v1.client_info.ClientInfo):
                The client info used to send a user-agent string along with
                API requests. If ``None``, then default info will be used.
                Generally, you only need to set this if you're developing
                your own client library.
        """
        {% if service.any_extended_operations_methods %}
        self._extended_operations_services: Dict[str, Any] = {}
        {% endif %}

        if not host:
            host = DEFAULT_HOST

        if ':' not in host:
            host += ':443'
        self._host = host


    def _prep_wrapped_messages(self, client_info):
        # Precompute the wrapped methods.
        self._wrapped_methods = {
            {% for method in service.methods.values() %}
            self.{{ method.transport_safe_name|snake_case }}: gapic_v1.method.wrap_method(
                self.{{ method.transport_safe_name|snake_case }},
                {% if method.retry %}
                default_retry=retries.Retry(
                    {% if method.retry.initial_backoff %}initial={{ method.retry.initial_backoff }},{% endif %}
                    {% if method.retry.max_backoff %}maximum={{ method.retry.max_backoff }},{% endif %}
                    {% if method.retry.backoff_multiplier %}multiplier={{ method.retry.backoff_multiplier }},{% endif %}
                    predicate=retries.if_exception_type(
                        {% for ex in method.retry.retryable_exceptions|sort(attribute='__name__') %}
                        core_exceptions.{{ ex.__name__ }},
                        {% endfor %}
                    ),
                    deadline={{ method.timeout }},
                ),
                {% endif %}
                default_timeout={{ method.timeout }},
                client_info=client_info,
            ),
            {% endfor %} {# precomputed wrappers loop #}
        }

    def close(self):
        """Closes resources associated with the transport.

       .. warning::
            Only call this method if the transport is NOT shared
            with other clients - this may cause errors in other clients!
        """
        raise NotImplementedError()

    {% if service.has_lro %}

    @property
    def operations_client(self):
        """Return the client designed to process long-running operations."""
        raise NotImplementedError()
    {% endif %}
    {% for method in service.methods.values() %}

    @property
    def {{ method.transport_safe_name|snake_case }}(self) -> Callable[
            [{{ method.input.ident }}],
            Union[
                {{ method.output.ident }},
                Awaitable[{{ method.output.ident }}]
            ]]:
        raise NotImplementedError()
    {% endfor %}

    {% if api.has_operations_mixin %}
    {% if "ListOperations" in api.mixin_api_methods %}
    @property
    def list_operations(
        self,
    ) -> Callable[
        [operations_pb2.ListOperationsRequest],
        Union[operations_pb2.ListOperationsResponse, Awaitable[operations_pb2.ListOperationsResponse]],
    ]:
        raise NotImplementedError()
    {% endif %}

    {% if "GetOperation" in api.mixin_api_methods %}
    @property
    def get_operation(
        self,
    ) -> Callable[
        [operations_pb2.GetOperationRequest],
        Union[operations_pb2.Operation, Awaitable[operations_pb2.Operation]],
    ]:
        raise NotImplementedError()
    {% endif %}

    {% if "CancelOperation" in api.mixin_api_methods %}
    @property
    def cancel_operation(
        self,
    ) -> Callable[
        [operations_pb2.CancelOperationRequest],
        None,
    ]:
        raise NotImplementedError()
    {% endif %}

    {% if "DeleteOperation" in api.mixin_api_methods %}
    @property
    def delete_operation(
        self,
    ) -> Callable[
        [operations_pb2.DeleteOperationRequest],
        None,
    ]:
        raise NotImplementedError()
    {% endif %}

    {% if "WaitOperation" in api.mixin_api_methods %}
    @property
    def wait_operation(
        self,
    ) -> Callable[
        [operations_pb2.WaitOperationRequest],
        Union[operations_pb2.Operation, Awaitable[operations_pb2.Operation]],
    ]:
        raise NotImplementedError()
    {% endif %}
    {% endif %}

    @property
    def kind(self) -> str:
        raise NotImplementedError()

    {% for operations_service in api.get_extended_operations_services(service)|sort(attribute="name") %}
    @property
    def _{{ operations_service.client_name|snake_case }}(self) -> {{ operations_service.name|snake_case }}.{{ operations_service.client_name }}:
        ex_op_service = self._extended_operations_services.get("{{ operations_service.name|snake_case }}")
        if not ex_op_service:
            ex_op_service = {{ operations_service.name|snake_case }}.{{ operations_service.client_name }}(
                credentials=self._credentials,
                transport=self.kind,
            )
            self._extended_operations_services["{{ operations_service.name|snake_case }}"] = ex_op_service

        return ex_op_service

    {% endfor %}


__all__ = (
    '{{ service.name }}Transport',
)
{% endblock %}
