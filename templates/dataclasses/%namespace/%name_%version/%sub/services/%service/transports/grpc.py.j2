{% extends '_base.py.j2' %}

{% block content %}

from typing import Callable, Dict, Optional, Sequence, Union # NOQA

{% if service.has_lro %}
from google.api_core import operations_v1
{% endif %}
from google.api_core import gapic_v1

import grpc  # type: ignore

{% filter sort_lines %}
{% for method in service.methods.values() %}
{{ method.input.ident.python_import }}
{{ method.output.ident.python_import }}
{% endfor %}
{% if opts.add_iam_methods or api.has_iam_mixin %}
from google.iam.v1 import iam_policy_pb2  # type: ignore
from google.iam.v1 import policy_pb2  # type: ignore
{% endif %}
{% if api.has_location_mixin %}
from google.cloud.location import locations_pb2 # type: ignore
{% endif %}
{% if api.has_operations_mixin %}
from google.longrunning import operations_pb2
{% endif %}
{% endfilter %}
from .base import {{ service.name }}Transport, DEFAULT_CLIENT_INFO, DEFAULT_HOST


class {{ service.name }}GrpcTransport({{ service.name }}Transport):
    """gRPC backend transport for {{ service.name }}.

    {{ service.meta.doc|rst(width=72, indent=4) }}

    This class defines the same methods as the primary client, so the
    primary client can load the underlying transport implementation
    and call it.

    It sends protocol buffers over the wire using gRPC (which is built on
    top of HTTP/2); the ``grpcio`` package must be installed.
    """
    _stubs: Dict[str, Callable]

    def __init__(self, *,
            host: str{% if service.host %} = '{{ service.host }}'{% else %} = DEFAULT_HOST {% endif %},
            channel: grpc.Channel = None,
            client_info: gapic_v1.client_info.ClientInfo = DEFAULT_CLIENT_INFO,
            ) -> None:
        """Instantiate the transport.

        Args:
            host ({% if service.host %}Optional[str]{% else %}str{% endif %}):
                {{ ' ' }}The hostname to connect to.
            channel (Optional[grpc.Channel]): A ``Channel`` instance through
                which to make calls.
            client_info (google.api_core.gapic_v1.client_info.ClientInfo):
                The client info used to send a user-agent string along with
                API requests. If ``None``, then default info will be used.
                Generally, you only need to set this if you're developing
                your own client library.

        Raises:
          TODO
        """
        self._grpc_channel = None

        self._stubs: Dict[str, Callable] = {}
        {% if service.has_lro %}
        self._operations_client: Optional[operations_v1.OperationsClient] = None
        {% endif %}

        if channel:
            # If a channel was explicitly provided, set it.
            self._grpc_channel = channel

        # The base transport sets the host, credentials and scopes
        super().__init__(
            host=host,
            client_info=client_info,
        )

        if not self._grpc_channel:
            self._grpc_channel = type(self).create_channel(
                self._host,
                # use the credentials which are saved
                options=[
                    ("grpc.max_send_message_length", -1),
                    ("grpc.max_receive_message_length", -1),
                ],
            )

        # Wrap messages. This must be done after self._grpc_channel exists
        self._prep_wrapped_messages(client_info)


    @classmethod
    def create_channel(cls,
                       host: str{% if service.host %} = '{{ service.host }}'{% endif %},
                       **kwargs) -> grpc.Channel:
        """Create and return a gRPC channel object.
        Args:
            host (Optional[str]): The host for the channel to use.
            kwargs (Optional[dict]): Keyword arguments, which are passed to the
                channel creation.
        Returns:
            grpc.Channel: A gRPC channel object.

        Raises:
            google.api_core.exceptions.DuplicateCredentialArgs: If both ``credentials``
              and ``credentials_file`` are passed.
        """

        return grpc.insecure_channel(
            host,
        )

    @property
    def grpc_channel(self) -> grpc.Channel:
        """Return the channel designed to connect to this service.
        """
        return self._grpc_channel

    {% if service.has_lro %}

    @property
    def operations_client(self) -> operations_v1.OperationsClient:
        """Create the client designed to process long-running operations.

        This property caches on the instance; repeated calls return the same
        client.
        """
        # Quick check: Only create a new client if we do not already have one.
        if self._operations_client is None:
            self._operations_client = operations_v1.OperationsClient(
                self.grpc_channel
            )

        # Return the client from cache.
        return self._operations_client
    {% endif %}
    {% for method in service.methods.values() %}

    @property
    def {{ method.transport_safe_name|snake_case }}(self) -> Callable[
            [{{ method.input.ident }}],
            {{ method.output.ident }}]:
        r"""Return a callable for the{{ ' ' }}
        {{- (method.name|snake_case).replace('_',' ')|wrap(
                width=70, offset=40, indent=8) -}}
        {{ ' ' }}method over gRPC.

        {{ method.meta.doc|rst(width=72, indent=8) }}

        Returns:
            Callable[[~.{{ method.input.name }}],
                    ~.{{ method.output.name }}]:
                A function that, when called, will call the underlying RPC
                on the server.
        """
        # Generate a "stub function" on-the-fly which will actually make
        # the request.
        # gRPC handles serialization and deserialization, so we just need
        # to pass in the functions for each.
        if '{{ method.transport_safe_name|snake_case }}' not in self._stubs:
            self._stubs['{{ method.transport_safe_name|snake_case }}'] = self.grpc_channel.{{ method.grpc_stub_type }}(
                '/{{ '.'.join(method.meta.address.package) }}.{{ service.name }}/{{ method.name }}',
                request_serializer={{ method.input.ident }}.{% if method.input.ident.python_import.module.endswith('_pb2') %}SerializeToString{% else %}serialize{% endif %},
                response_deserializer={{ method.output.ident }}.{% if method.output.ident.python_import.module.endswith('_pb2') %}FromString{% else %}deserialize{% endif %},
            )
        return self._stubs['{{ method.transport_safe_name|snake_case }}']
    {% endfor %}

    def close(self):
        self.grpc_channel.close()

    {% include '%namespace/%name_%version/%sub/services/%service/transports/_mixins.py.j2' %}


    @property
    def kind(self) -> str:
        return "grpc"


__all__ = (
    '{{ service.name }}GrpcTransport',
)
{% endblock %}
