{% extends '_base.py.j2' %}

{% block content %}
{% import "%namespace/%name_%version/%sub/services/%service/_client_macros.j2" as macros %}

from collections import OrderedDict
{% if service.any_extended_operations_methods %}
import functools
{% endif %}
import re
from typing import Dict, Optional, {% if service.any_server_streaming %}Iterable, {% endif %}{% if service.any_client_streaming %}Iterator, {% endif %}Sequence, Tuple, Type, Union
import pkg_resources
{% if service.any_deprecated %}
import warnings
{% endif %}

from google.api_core import client_options as client_options_lib
{% if service.any_extended_operations_methods %}
from google.api_core import extended_operation
{% endif %}
from google.api_core import gapic_v1
from google.api_core import retry as retries


try:
    OptionalRetry = Union[retries.Retry, gapic_v1.method._MethodDefault]
except AttributeError:  # pragma: NO COVER
    OptionalRetry = Union[retries.Retry, object]  # type: ignore

{% filter sort_lines %}
{% for method in service.methods.values() %}
{% for ref_type in method.flat_ref_types %}
{{ ref_type.ident.python_import }}
{% endfor %}
{% endfor %}
{# TODO: Remove after https://github.com/googleapis/gapic-generator-python/pull/1240 is merged. #}
{% if opts.add_iam_methods or api.has_iam_mixin %}
from google.iam.v1 import iam_policy_pb2  # type: ignore
from google.iam.v1 import policy_pb2  # type: ignore
{% endif %}
{% if api.has_location_mixin %}
from google.cloud.location import locations_pb2 # type: ignore
{% endif %}
{% if api.has_operations_mixin %}
from google.longrunning import operations_pb2
{% endif %}
{% endfilter %}
from .transports.base import {{ service.name }}Transport, DEFAULT_CLIENT_INFO, DEFAULT_HOST
{% if 'grpc' in opts.transport %}
from .transports.grpc import {{ service.grpc_transport_name }}
{% endif %}
{% if 'rest' in opts.transport %}
from .transports.rest import {{ service.name }}RestTransport
{% endif %}


class {{ service.client_name }}Meta(type):
    """Metaclass for the {{ service.name }} client.

    This provides class-level methods for building and retrieving
    support objects (e.g. transport) without polluting the client instance
    objects.
    """
    _transport_registry = OrderedDict()  # type: Dict[str, Type[{{ service.name }}Transport]]
    {% if "grpc" in opts.transport %}
    _transport_registry["grpc"] = {{ service.grpc_transport_name }}
    {% endif %}
    {% if "rest" in opts.transport %}
    _transport_registry["rest"] = {{ service.name }}RestTransport
    {% endif %}

    def get_transport_class(cls,
            label: str = None,
        ) -> Type[{{ service.name }}Transport]:
        """Returns an appropriate transport class.

        Args:
            label: The name of the desired transport. If none is
                provided, then the first transport in the registry is used.

        Returns:
            The transport class to use.
        """
        # If a specific transport is requested, return that one.
        if label:
            return cls._transport_registry[label]

        # No transport is requested; return the default (that is, the first one
        # in the dictionary).
        return next(iter(cls._transport_registry.values()))


class {{ service.client_name }}(metaclass={{ service.client_name }}Meta):
    """{{ service.meta.doc|rst(width=72, indent=4) }}"""

    DEFAULT_ENDPOINT = {% if service.host %}"{{ service.host }}"{% else %}DEFAULT_HOST{% endif %}

    @property
    def transport(self) -> {{ service.name }}Transport:
        """Returns the transport used by the client instance.

        Returns:
            {{ service.name }}Transport: The transport used by the client
                instance.
        """
        return self._transport


    {% for message in service.resource_messages|sort(attribute="resource_type") %}
    @staticmethod
    def {{ message.resource_type|snake_case }}_path({% for arg in message.resource_path_args %}{{ arg }}: str,{% endfor %}) -> str:
        """Returns a fully-qualified {{ message.resource_type|snake_case }} string."""
        return "{{ message.resource_path }}".format({% for arg in message.resource_path_args %}{{ arg }}={{ arg }}, {% endfor %})


    @staticmethod
    def parse_{{ message.resource_type|snake_case }}_path(path: str) -> Dict[str,str]:
        """Parses a {{ message.resource_type|snake_case }} path into its component segments."""
        m = re.match(r"{{ message.path_regex_str }}", path)
        return m.groupdict() if m else {}

    {% endfor %}{# resources #}
    {% for resource_msg in service.common_resources.values()|sort(attribute="type_name") %}
    @staticmethod
    def common_{{ resource_msg.message_type.resource_type|snake_case }}_path({% for arg in resource_msg.message_type.resource_path_args %}{{ arg }}: str, {%endfor %}) -> str:
        """Returns a fully-qualified {{ resource_msg.message_type.resource_type|snake_case }} string."""
        return "{{ resource_msg.message_type.resource_path }}".format({% for arg in resource_msg.message_type.resource_path_args %}{{ arg }}={{ arg }}, {% endfor %})

    @staticmethod
    def parse_common_{{ resource_msg.message_type.resource_type|snake_case }}_path(path: str) -> Dict[str,str]:
        """Parse a {{ resource_msg.message_type.resource_type|snake_case }} path into its component segments."""
        m = re.match(r"{{ resource_msg.message_type.path_regex_str }}", path)
        return m.groupdict() if m else {}

    {% endfor %}{# common resources #}

    def __init__(self, *,
            transport: Union[str, {{ service.name }}Transport, None] = None,
            client_options: Optional[client_options_lib.ClientOptions] = None,
            client_info: gapic_v1.client_info.ClientInfo = DEFAULT_CLIENT_INFO,
            ) -> None:
        """Instantiates the {{ (service.client_name|snake_case).replace('_', ' ') }}.

        Args:

            transport (Union[str, {{ service.name }}Transport]): The
                transport to use. If set to None, a transport is chosen
                automatically.
                {% if 'rest' in opts.transport and not opts.rest_numeric_enums %}
                NOTE: "rest" transport functionality is currently in a
                beta state (preview). We welcome your feedback via an
                issue in this library's source repository.
                {% endif %}
            client_options (google.api_core.client_options.ClientOptions): Custom options for the
                client. It won't take effect if a ``transport`` instance is provided.
                The ``api_endpoint`` property can be used to override the
                default endpoint provided by the client.
            client_info (google.api_core.gapic_v1.client_info.ClientInfo):
                The client info used to send a user-agent string along with
                API requests. If ``None``, then default info will be used.
                Generally, you only need to set this if you're developing
                your own client library.

        Raises:
            TODO
        """
        if isinstance(client_options, dict):
            client_options = client_options_lib.from_dict(client_options)
        if client_options is None:
            client_options = client_options_lib.ClientOptions()

        api_endpoint = self.DEFAULT_ENDPOINT
        if client_options and client_options.api_endpoint:
            api_endpoint = client_options.api_endpoint

        # Save or instantiate the transport.
        # Ordinarily, we provide the transport, but allowing a custom transport
        # instance provides an extensibility point for unusual situations.
        if isinstance(transport, {{ service.name }}Transport):
            # transport is a {{ service.name }}Transport instance.
            self._transport = transport
        else:
            Transport = type(self).get_transport_class(transport)
            self._transport = Transport(
                host=api_endpoint,
                client_info=client_info,
            )

    {% for method in service.methods.values() %}
{% if method.operation_service %}{# Uses extended operations #}
{{ macros.client_method(method, method.safe_name|snake_case + "_unary", snippet_index, api, service) }}

{{ macros.client_method(method, method.safe_name|snake_case, snippet_index, api, service, full_extended_lro=True) }}
{% else %}
{{ macros.client_method(method, method.safe_name|snake_case, snippet_index, api, service) }}
{% endif %}
    {% endfor %}

    def __enter__(self):
        return self

    def __exit__(self, type, value, traceback): #pylint: disable=redefined-builtin
        """Releases underlying transport's resources.

        .. warning::
            ONLY use as a context manager if the transport is NOT shared
            with other clients! Exiting the with block will CLOSE the transport
            and may cause errors in other clients!
        """
        self.transport.close()

    {% include '%namespace/%name_%version/%sub/services/%service/_mixins.py.j2' %}


try:
    DEFAULT_CLIENT_INFO = gapic_v1.client_info.ClientInfo(
        gapic_version=pkg_resources.get_distribution(
            "{{ api.naming.warehouse_package_name }}",
        ).version,
    )
except pkg_resources.DistributionNotFound:
    DEFAULT_CLIENT_INFO = gapic_v1.client_info.ClientInfo()


__all__ = (
    "{{ service.client_name }}",
)
{% endblock %}
