@dataclasses.dataclasses
class {{ message.name }}:
    r"""{{ message.meta.doc | rst(indent=4) }}"""

    {# Iterate over fields. -#}
    {% for field in message.fields.values() %}
    {#- Handle Where Field is of Type Map -#}
    {%- if field.map -%}
    {% with key_field = field.message.fields['key'], value_field = field.message.fields['value'] %}
    {{ field.name}}: OrderDict[{{ key_field.type.python_type.__name__ }}, {{ value_field.type.python_type.__name__ }}] = field(default_factory=OrderedDict)
    {% endwith %}
    {% else %}

    {{ field.name }}: {% if field.repeated %}Tuple[{% endif %}{% if field.enum or field.message %}{{ field.type.ident.rel(message.ident) }}{% else %}{{ field.type.python_type.__name__ }}{% endif %}{% if field.repeated %}] = field(default_factory=Tuple){% endif %}

    {% endif %}
    {% endfor %}{# for field in message.fields.values #}

    {# Iterate over nested enums. -#}
    {% for enum in message.nested_enums.values() %}
        {% filter indent(first=True) %}
            {% include '%namespace/%name_%version/%sub/types/_enum.py.j2' %}
        {% endfilter %}
    {% endfor %}

    {# Iterate over nested messages. -#}
    {% for submessage in message.nested_messages.values() %}
        {% if not submessage.map %}
        {% with message = submessage %}{% filter indent(first=True) %}
            {% include '%namespace/%name_%version/%sub/types/_message.py.j2' %}
        {% endfilter %}{% endwith %}
        {% endif %}
    {% endfor %}

{{ '\n\n' }}
